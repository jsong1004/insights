# AI Insights Generator Flask App - Dockerfile
FROM python:3.11-slim

# Set metadata
LABEL maintainer="AI Insights Generator"
LABEL description="Flask web application for generating AI insights using CrewAI multi-agent system with Firebase authentication"
LABEL version="2.0"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy requirements first for better Docker layer caching
COPY requirements-firebase.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements-firebase.txt

# Copy application code
COPY app.py .
COPY config.py .
COPY templates/ templates/
COPY static/ static/
COPY auth/ auth/
COPY core/ core/
COPY routes/ routes/

# Copy Firebase service account key if it exists (optional for local development)
COPY service-account-key.json* ./

# Create necessary directories for CrewAI and app, and set permissions
RUN mkdir -p /app/logs && \
    mkdir -p /home/appuser/.crewai && \
    mkdir -p /home/appuser/.cache && \
    chown -R appuser:appuser /app && \
    chown -R appuser:appuser /home/appuser

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:5000/status', timeout=10)" || exit 1

# Set default environment for Flask
ENV FLASK_APP=app.py \
    FLASK_ENV=production \
    FLASK_RUN_HOST=0.0.0.0 \
    FLASK_RUN_PORT=5000

# Firebase configuration will be provided via Cloud Run secrets
# No sensitive data is stored in the Docker image

# Run the application
CMD ["python", "app.py"] 